require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before (:each) do
    OmniAuth.config.test_mode = true
    @user = create(:user)
    @user.save!
  end

  after (:each) do
    OmniAuth.config.test_mode = false
  end

  describe "GET index" do
    it "assigns all users as @users" do
      get :index, {}, valid_session
      assigns(:users).should eq([@user])
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
      get :edit, {:id => @user.to_param}, valid_session
      assigns(:user).should eq(@user)
    end
  end

  describe "PUT update" do
    before do
      request.env["devise.mapping"] = Devise.mappings[:admin]
      request.env["omniauth.auth"] = OmniAuth.config.mock_auth[:google_oauth2] 
      OmniAuth.config.add_mock(:google_oauth2, {:uid => '12345'})
      sign_in create(:admin)
    end

    describe "with valid params" do
      it "updates the requested user as admin" do
        User.any_instance.should_receive(:update).with({ "is_admin" => true, "is_blocked" => false})
        put :update, {:id => @user.to_param, :user => { "is_admin" => true, "is_blocked" => false }}, valid_session
      end

      it "assigns the requested user as @user" do
        put :update, {:id => @user.to_param, :user => { "is_admin" => false, "is_blocked" => false }}, valid_session
        assigns(:user).should eq(@user)
      end

      it "redirects to the user" do
        put :update, {:id => @user.to_param, :user => { "is_admin" => false, "is_blocked" => false }}, valid_session
        response.should redirect_to(users_url)
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        put :update, {:id => @user.to_param, :user => { "name" => "invalid param" }}, valid_session
        assigns(:user).should eq(@user)
        @user.name.should eq("user")
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => @user.to_param, :user => { "name" => "invalid param" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroy is not allowed for users" do
      expect {
        delete :destroy, {:id => @user.to_param}, valid_session
      }.to raise_error()
    end
  end

end
