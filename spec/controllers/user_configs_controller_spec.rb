require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UserConfigsController do

  # This should return the minimal set of attributes required to create a valid
  # UserConfig. As you add validations to UserConfig, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { 
    { :rating_threshold => 2,
      :opt_out_by_rating => true,
      :opt_out_by_review => true,
      :daily_digest_enabled => true
    } 
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserConfigsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    OmniAuth.config.test_mode = true
    request.env["omniauth.auth"] = OmniAuth.config.mock_auth[:google_oauth2] 
    request.env["devise.mapping"] = Devise.mappings[:user]
    OmniAuth.config.add_mock(:google_oauth2, {:uid => '12345'})
    @user1 = create(:user, :id => 10)
    @user1.save!
    @user2 = create(:user, :id => 11)
    @user2.save!
    @user_config1 = create(:user_config, :id => 10)
    @user_config2 = create(:user_config, :id => 11)
  end

  after do
    OmniAuth.config.test_mode = false
  end

  context "Invalid operations" do
    describe "GET index" do
      it "should raise ActionNotFound exception" do
        expect {
          get :index, {}, valid_session
          }.to raise_error(AbstractController::ActionNotFound)
      end
    end
    describe "GET new" do
      it "should raise ActionNotFound exception" do
        expect {
          get :new, {}, valid_session
          }.to raise_error(AbstractController::ActionNotFound)
      end
    end
    describe "POST create" do
      it "should raise ActionNotFound exception" do
        expect {
          post :create, {:user_config => valid_attributes}, valid_session
          }.to raise_error(AbstractController::ActionNotFound)
      end
    end
    describe "DELETE destroy" do
      it "should raise ActionNotFound exception" do
        expect {
          delete :destroy, {:id => @user_config1.to_param}, valid_session
        }.to raise_error(AbstractController::ActionNotFound)
      end
    end
  end

  context "if user is not signed in" do
    describe "GET show" do
      it "should redirect user to sign in page" do
        get :show, {:id => @user_config1.to_param}, valid_session
        response.should redirect_to(new_user_session_url)
      end
    end

    describe "GET edit" do
      it "should redirect user to sign in page" do
        get :edit, {:id => @user_config1.to_param}, valid_session
        response.should redirect_to(new_user_session_url)
      end
    end
  end

  context "if user is signed in with no config" do
    before do
      sign_in @user2
    end
    describe "GET show" do
      it "assigns a new user_config as @user_config and set default values" do
        get :show, {:id => nil}, valid_session
        response.should render_template("show")
      end
    end
  end
  context "if user is signed in" do
    before do
      sign_in @user1
      @user_config1.user_id = @user1.id
      @user_config1.save!
    end
    describe "GET show" do
      it "assigns the the logged in user's user_config as @user_config" do
        get :show, {:id => @user_config1.to_param}, valid_session
        assigns(:user_config).should eq(@user_config1)
      end
      it "should not show different users config" do
        get :show, {:id => @user_config2.to_param}, valid_session
        assigns(:user_config).should eq(@user_config1)
      end
    end
    describe "GET edit" do
      it "assigns the the logged in user's user_config as @user_config" do
        get :show, {:id => @user_config1.to_param}, valid_session
        assigns(:user_config).should eq(@user_config1)
      end
      it "should not show different users config" do
        get :show, {:id => @user_config1.to_param}, valid_session
        assigns(:user_config).should eq(@user_config1)
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested user_config" do
          put :update, {:id => @user_config1.to_param, :user_config => valid_attributes}, valid_session
        end
        it "assigns the requested user_config as @user_config" do
          put :update, {:id => @user_config1.to_param, :user_config => valid_attributes}, valid_session
          assigns(:user_config).should eq(@user_config1)
        end
        it "redirects to the user_config" do
          put :update, {:id => @user_config1.to_param, :user_config => valid_attributes}, valid_session
          response.should redirect_to(@user_config1)
        end
      end

      describe "with invalid params" do
        it "assigns the user_config as @user_config" do
          put :update, {:id => @user_config1.to_param, :user_config => { "update" => "invalid value" }}, valid_session
          assigns(:user_config).should eq(@user_config1)
        end
        it "re-renders the 'edit' template" do
          put :update, {:id => @user_config1.to_param, :user_config => { "update" => "invalid value" }}, valid_session
          response.should render_template("edit")
        end
      end
    end
  end
end
