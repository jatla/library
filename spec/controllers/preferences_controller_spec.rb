require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PreferencesController do

  # This should return the minimal set of attributes required to create a valid
  # BookPreference. As you add validations to BookPreference, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { 
    {  
      by_rating: true,
      rating_threshold: 1,
      by_review: true
    } 
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BookPreferencesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    OmniAuth.config.test_mode = true
    request.env["omniauth.auth"] = OmniAuth.config.mock_auth[:google_oauth2] 
    request.env["devise.mapping"] = Devise.mappings[:user]
    OmniAuth.config.add_mock(:google_oauth2, {:uid => '12345'})
    @user = create(:user)
    @user.save!
    @book_preference = create(:book_preferences)
    @book_preference.save
    @book = create(:approved_active_book, :id => 101)
    @book.save!
    @book1 = create(:approved_active_book, :id => 102)
    @book1.save!
  end

  after do
    OmniAuth.config.test_mode = false
  end

  context "Invalid operations" do
    describe "GET index" do
      it "should raise ActionNotFound exception" do
        expect {
            get :index, {:book_id => @book.id}, valid_session
          }.to raise_error(AbstractController::ActionNotFound)
      end
    end

    describe "DELETE destroy" do
      it "should raise ActionNotFound exception" do
        expect {
            delete :destroy, {:book_id => @book.id, :id => @book_preference.to_param}, valid_session
          }.to raise_error(AbstractController::ActionNotFound)
      end
    end
  end

  context "If user is not signed in" do
    describe "GET show" do
      it "should redirect user to sign in page" do
        get :show, {:book_id => @book.id, :id => @book_preference.id}, valid_session
        response.should redirect_to(new_user_session_url)
      end
    end

    describe "GET new" do
      it "should redirect user to sign in page" do
        get :new, {:book_id => @book.id}, valid_session
        response.should redirect_to(new_user_session_url)
      end
    end

    describe "GET edit" do
      it "should redirect user to sign in page" do
        get :edit, {:book_id => @book.id, :id => @book_preference.id}, valid_session
        response.should redirect_to(new_user_session_url)
      end
    end

    describe "POST create" do
      it "should redirect user to sign in page" do
        post :create, {:book_id => @book.id, :opted_out => valid_attributes}, valid_session
        response.should redirect_to(new_user_session_url)
      end
    end

    describe "PUT update" do
      it "should redirect user to sign in page" do
        put :update, {:book_id => @book.id,:id => @book_preference.to_param, :opted_out => valid_attributes }, valid_session
        response.should redirect_to(new_user_session_url)
      end
    end
  end

  context "if user is signed in" do
    before do
      @book_preference.user_id = @user.id
      @book_preference.book_id = @book.id
      @book_preference.save!
      sign_in @user
    end
    describe "GET show" do
      it "assigns the requested book_preference as @book_preference" do
        get :show, {:book_id => @book.id, :id => @book_preference.to_param}, valid_session
        assigns(:book_preference).should eq(@book_preference)
      end
    end

    describe "GET new" do
      it "assigns a new book_preference as @book_preference" do
        get :new, {:book_id => @book.id}, valid_session
        assigns(:book_preference).should be_a_new(OptedOut)
      end
    end

    describe "GET edit" do
      it "assigns the requested book_preference as @book_preference" do
        get :edit, {:book_id => @book.id, :id => @book_preference.to_param}, valid_session
        assigns(:book_preference).should eq(@book_preference)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "doesnt create a new BookPreference if one already exists" do
          expect {
            post :create, {:book_id => @book.id, :opted_out => valid_attributes}, valid_session
          }.to change(OptedOut, :count).by(0)
        end

        it "creates a new BookPreference if doesn't exist" do
          expect {
            post :create, {:book_id => @book1.id, :opted_out => valid_attributes}, valid_session
          }.to change(OptedOut, :count).by(1)
        end

        it "assigns a newly created book_preference as @book_preference" do
          post :create, {:book_id => @book.id, :opted_out => valid_attributes}, valid_session
          assigns(:book_preference).should be_a(OptedOut)
          assigns(:book_preference).should be_persisted
        end

        it "redirects to the book" do
          post :create, {:book_id => @book.id, :opted_out => valid_attributes}, valid_session
          response.should redirect_to(@book)
        end
      end

      describe "redirects to the book" do
        it "re-renders the 'new' template" do
          post :create, {:book_id => @book.id, :opted_out => { "invalid" => "parameter" }}, valid_session
          response.should redirect_to(@book)
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested book_preference" do
          put :update, {:book_id => @book.id, :id => @book_preference.to_param, :opted_out => valid_attributes}, valid_session
        end

        it "assigns the requested book_preference as @book_preference" do
          put :update, {:book_id => @book.id, :id => @book_preference.to_param, :opted_out => valid_attributes}, valid_session
          assigns(:book_preference).should eq(@book_preference)
        end

        it "redirects to the book" do
          put :update, {:book_id => @book.id, :id => @book_preference.to_param, :opted_out => valid_attributes}, valid_session
          response.should redirect_to(@book)
        end
      end

      describe "with invalid params" do
        it "assigns the book_preference as @book_preference" do
          put :update, {:book_id => @book.id, :id => @book_preference.to_param, :opted_out => { "invalid" => "parameter" }}, valid_session
          assigns(:book_preference).should eq(@book_preference)
        end

        it "re-renders the 'edit' template" do
          put :update, {:book_id => @book.id, :id => @book_preference.to_param, :opted_out => { "invalid" => "parameter" }}, valid_session
          response.should render_template("edit")
        end
      end
    end
  end
end
