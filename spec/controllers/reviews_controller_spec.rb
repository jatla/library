require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ReviewsController do

  # This should return the minimal set of attributes required to create a valid
  # Review. As you add validations to Review, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "rating" => 3, "description" => "MyString" } }
  let(:in_valid_attributes) { { "inavlid" => "attribute" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ReviewsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    OmniAuth.config.test_mode = true
    request.env["omniauth.auth"] = OmniAuth.config.mock_auth[:google_oauth2] 
    @approved_book = create(:approved_active_book)
    @approved_book.save!
    @inactive_book = create(:approved_in_active_book)
    @inactive_book.save!
    @un_approved_book1 = create(:un_approved_book, :id => 98)
    @un_approved_book1.save!
    @un_approved_book2 = create(:un_approved_book, :id => 99)
    @un_approved_book2.save!
    @user1 = create(:user)
    @user1.save!
    @user2 = create(:user)
    @user2.save!
    @review = create(:review, :id => 1)
    @review.book_id = @approved_book.id
    @review.save!
  end

  after do
    OmniAuth.config.test_mode = false
  end

  context "if user is not signed in" do
    describe "GET index" do
      it "assigns all reviews as @reviews" do
        get :index, {:book_id => @approved_book.id}, valid_session
        assigns(:reviews).should eq([@review])
      end
    end

    describe "GET show" do
      it "assigns the requested review as @review" do
        get :show, {:book_id => @approved_book.id, :id => @review.to_param}, valid_session
        assigns(:review).should eq(@review)
      end
    end
  end

  context "if user is signed in" do
    before do
      @review.user_id = @user1.id
      @review.save!
      sign_in @user1
    end
    describe "GET new" do
      it "assigns a new review as @review" do
        get :new, {:book_id => @approved_book.id}, valid_session
        assigns(:review).should be_a_new(Review)
      end
    end
    describe "GET edit" do
      it "assigns the requested review as @review" do
        get :edit, {:book_id => @approved_book.id,:id => @review.to_param}, valid_session
        assigns(:review).should eq(@review)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Review" do
          expect {
            post :create, {:book_id => @approved_book.id, :review => valid_attributes}, valid_session
          }.to change(Review, :count).by(1)
        end

        it "assigns a newly created review as @review" do
          post :create, {:book_id => @approved_book.id, :review => valid_attributes}, valid_session
          assigns(:review).should be_a(Review)
          assigns(:review).should be_persisted
        end

        # it "redirects to the created review" do
        #   post :create, {:book_id => @approved_book.id,:review => valid_attributes}, valid_session
        #   response.should redirect_to(@approved_book)
        # end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved review as @review" do
          post :create, {:book_id => @approved_book.id, :review => in_valid_attributes}, valid_session
          assigns(:review).should be_a_new(Review)
        end

        # it "re-renders the 'new' template" do
        #   post :create, {:book_id => @approved_book.id, :review => in_valid_attributes}, valid_session
        #   response.should render_template("new")
        # end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested review" do
          put :update, {:book_id => @approved_book.id, :id => @review.to_param, :review => valid_attributes}, valid_session
        end

        it "assigns the requested review as @review" do
          put :update, {:book_id => @approved_book.id, :id => @review.to_param, :review => valid_attributes}, valid_session
          assigns(:review).should eq(@review)
        end

        # it "redirects to the review" do
        #   put :update, {:book_id => @approved_book.id, :id => @review.to_param, :review => valid_attributes}, valid_session
        #   response.should redirect_to(@approved_book)
        # end
      end

      describe "with invalid params" do
        it "assigns the review as @review" do
          put :update, {:book_id => @approved_book.id, :id => @review.to_param, :review => valid_attributes}, valid_session
          assigns(:review).should eq(@review)
        end

        # it "re-renders the 'edit' template" do
        #   put :update, {:book_id => @approved_book.id, :id => @review.to_param, :review => valid_attributes}, valid_session
        #   response.should render_template("edit")
        # end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested review" do
        expect {
          delete :destroy, {:book_id => @approved_book.id, :id => @review.to_param}, valid_session
        }.to change(Review, :count).by(-1)
      end

      # it "redirects to the reviews list" do
      #   delete :destroy, {:book_id => @approved_book.id, :id => @review.to_param}, valid_session
      #   response.should redirect_to(request.env["HTTP_REFERER"])
      # end
    end
  end
end
